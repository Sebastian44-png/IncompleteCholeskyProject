#include "hpc.h"

/* perform the ICNE(0)-decomposition on an matrix stored
   in the sed format, the original matrix gets overwritten */

index sed_icne0(sed* A, double alpha){

    double* x;
    index* ind;
    index n;
    index nzmax;

    x = A->x;
    ind = A->i;
    n = A->n;
    nzmax = A->nzmax;

    // helper variables
    index col_first, col_last;
    index row_index;
    index jj;
    double* temp;
    double* lij_ptr;

    // array for storing l_ii
    double* l_ii = malloc(n*sizeof(double));
    double* d = malloc(n*sizeof(double));
    for(index i=0; i<n; i++){
        l_ii[i] = 0;
        d[i] = 0;
    }

    d[0] = x[0];
    l_ii[0] = 1;

    for(index j=1; j<n; j++){  // iterate through A column-wise    

        //compute all nonzero inner products:
        for(index i = ind[j]; i < ind[j+1]; i++){
            printf("i = %d\n", i);
                //Compute if j <= i-1
            row_index = ind[i];
            printf("row_index = %d\n", row_index);
            if(row_index > j) { continue; }  /* add count ? */
                
            //find a_ij and store l_ij there
            lij_ptr = sed_find_in_column(A, j, row_index);

            //Compute inner product
            for(index ii = ind[j]; ii <  ind[j+1]; ii++){
                printf("ii = %d\n", ii);

                temp = sed_find_in_column(A, row_index, ind[ii]);

                if(temp == NULL) { continue; }

                if(ind[ii] <= j){

                    if(ind[ii] >= row_index){
                        *lij_ptr +=  *(temp) * x[ii] ;
                    }else{
                        *lij_ptr += *(sed_find_in_column(A, ind[ii], row_index)) * x[ii];
                    }

                } else {

                    if(ind[ii] >= row_index){
                             *lij_ptr +=  *(temp) * *(sed_find_in_column(A, ii, ind[ii])) ;
                        }else{
                             *lij_ptr += *(sed_find_in_column(A, ind[ii], row_index)) * *(sed_find_in_column(A, j, ind[ii]));
                        }
                }         
            } 
            
        }
        // compute l_ii = ||a_i||^2 + alpha
        for(index i = ind[j]; i < ind[j]; j++){

            if(ind[i] <= j){
                l_ii[j] += pow(x[i],2); 
            } else {
                l_ii[j] += *(sed_find_in_column(A, j,i));
            }
        }
        l_ii[j] += alpha;
        d[j] = l_ii[j];
    }

    //store d_ii in a_ii
    for (index i=0; i < n; i++){
        x[i] = d[i];
    }

    return (1);
    }

// finds a row element in a given column
double* sed_find_in_column(sed* A, index row, index col){

    for(index j = A->i[col]; j < A->i[col+1]; j++){
        
        if(A->i[j] == row){
            printf("Entry (%d, %d) = %2.2f \n", row, col, A->x[j]);
            return &A->x[j];
        }
    }
    printf("Entry (%d, %d) not found \n", row, col);
    return NULL;
}

